import os
import asyncio
import logging
import ffmpeg
from pathlib import Path
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from dotenv import load_dotenv
from transfer_sh_client.manager import TransferManager
import fal_client
import openai
import tempfile
from collections import defaultdict
from typing import Dict, Set

# === –ó–ê–ì–†–£–ó–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# === –¢–ê–ë–õ–ò–¶–ê –ó–ê–î–ê–ß –î–õ–Ø –ö–ê–ñ–î–û–ì–û –Æ–ó–ï–†–ê ===
user_tasks: Dict[int, Set[asyncio.Task]] = defaultdict(set)

# === –ö–õ–ò–ï–ù–¢–´ –î–õ–Ø transfer.sh –∏ OpenRouter ===
transfer_manager = TransferManager(
    os.getenv('TRANSFER_SH_HOST'),
    os.getenv('TRANSFER_SH_LOGIN'),
    os.getenv('TRANSFER_SH_PASSWORD')
)

openai_client = openai.OpenAI(
    base_url=os.getenv('OPENROUTER_BASE_URL'),
    api_key=os.getenv('OPENROUTER_API_KEY'),
)

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
MAX_MESSAGE_LENGTH = 4096
TOTAL_STEPS = 4

HELP_MESSAGE = """
üéô –Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç —Å —É–º–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∏ –≤–µ—Ä–Ω—É –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (mp3, wav, ogg, m4a)

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
"""

# =======================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =======================================================================

async def cleanup_task(user_id: int, task: asyncio.Task):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—à–Ω–æ–≥–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)."""
    try:
        await task
    except Exception as e:
        logging.error(f"Task error for user {user_id}: {str(e)}")
    finally:
        user_tasks[user_id].discard(task)
        if not user_tasks[user_id]:
            del user_tasks[user_id]


def chunk_text(text: str, max_size: int = MAX_MESSAGE_LENGTH) -> list[str]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤).
    –†–∞–∑–±–∏–≤–∞–µ—Ç ¬´–∂—ë—Å—Ç–∫–æ¬ª –ø–æ max_size. –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º/–∞–±–∑–∞—Ü–∞–º ‚Äì –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø.–ª–æ–≥–∏–∫—É.
    """
    chunks = []
    start = 0
    while start < len(text):
        end = start + max_size
        chunks.append(text[start:end])
        start = end
    return chunks


async def send_long_text_as_messages(
    message: types.Message,
    text: str,
    initial_text: str = None
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º. 
    - –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º progress_message (message) –Ω–∞ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å.
    - –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–æ–±–∞–≤–ª—è–µ–º ¬´–ß–∞—Å—Ç—å X –∏–∑ N¬ª –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞.
    """
    # –°–æ–µ–¥–∏–Ω—è–µ–º "initial_text + —Å–∞–º —Ç–µ–∫—Å—Ç"
    if initial_text:
        combined_text = initial_text.strip() + "\n" + text
    else:
        combined_text = text

    chunks = chunk_text(combined_text, MAX_MESSAGE_LENGTH)
    total_chunks = len(chunks)

    for i, chunk in enumerate(chunks):
        # –ï—Å–ª–∏ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ "–ß–∞—Å—Ç—å X –∏–∑ N"
        if total_chunks > 1:
            # –ü—Ä–æ–Ω—É–º–µ—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã initial_text –Ω–µ "–¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å"
            chunk_to_send = f"–ß–∞—Å—Ç—å {i+1} –∏–∑ {total_chunks}:\n{chunk}"
        else:
            chunk_to_send = chunk

        # –ü–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å edit_text ‚Äî —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å progress_message
        if i == 0:
            await message.edit_text(chunk_to_send)
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await message.answer(chunk_to_send)


async def download_telegram_file(file: types.File, destination: str):
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å."""
    await bot.download_file(file.file_path, destination)


async def get_file_extension(file_path: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ ffmpeg.probe (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ to_thread)."""
    try:
        probe = await asyncio.to_thread(ffmpeg.probe, file_path)
        # format_name –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π
        return probe['format']['format_name'].split(',')[0].lower()
    except ffmpeg.Error:
        return None


async def try_format_with_openai(text: str) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è ¬´–ø—Ä–æ–±–∏—Ç—å¬ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter –Ω–∞ –¥–≤—É—Ö –º–æ–¥–µ–ª—è—Ö:
      1) google/gemini-2.0-flash-exp:free
      2) –ø—Ä–∏ –æ—à–∏–±–∫–µ -> google/gemini-flash-1.5
    –ï—Å–ª–∏ –æ–±–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    """
    messages = [
        {
            "role": "user",
            "content": (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–µ–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã "
                "–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏. –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, "
                "–¥–æ–±–∞–≤—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. "
                "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.\n\n"
                f"–¢–µ–∫—Å—Ç: {text}"
            )
        }
    ]

    # –ú–æ–¥–µ–ª—å 1
    try:
        completion = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model="google/gemini-2.0-flash-exp:free",
            messages=messages,
            temperature=0.2,
            max_tokens=8000,
            stream=False
        )
        return completion.choices[0].message.content
    except Exception as e:
        # raise e
        logging.warning("–ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å —É–ø–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π: %s", str(e))

    # –ú–æ–¥–µ–ª—å 2
    try:
        completion = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model="google/gemini-flash-1.5",
            messages=messages,
            temperature=0.2,
            max_tokens=8000,
            stream=False
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error("–í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å —Ç–æ–∂–µ —É–ø–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π: %s", str(e))
        raise e


# =======================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ê–£–î–ò–û
# =======================================================================

async def process_audio_file(file_path: str, progress_message: types.Message):
    """
    –û–±—â–∏–π –∫–æ–Ω–≤–µ–π–µ—Ä:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ transfer.sh
    2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ fal_client
    3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (OpenRouter)
    4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    try:
        # –®–∞–≥ 1: –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ transfer.sh
        await progress_message.edit_text(
            "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä... (1/4)\n"
            "‚îî –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )
        download_link = await asyncio.to_thread(
            transfer_manager.upload,
            file_path=file_path,
            max_downloads=2
        )

        # –®–∞–≥ 2: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ fal_client
        await progress_message.edit_text(
            "üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ... (2/4)\n"
            "‚îî –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç"
        )
        # –ï—Å–ª–∏ fal_client.subscribe ‚Äî –æ–±—ã—á–Ω–∞—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è) —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º to_thread:
        result = await asyncio.to_thread(
            fal_client.subscribe,
            "fal-ai/whisper",
            arguments={
                "audio_url": download_link,
                "task": "transcribe",
                "language": "ru"
            }
        )

        if not result or not result.get('text'):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ.")

        raw_text = result['text']

        # –®–∞–≥ 3: —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (OpenRouter)
        await progress_message.edit_text(
            "üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞... (3/4)\n"
            "‚îî –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"
        )
        try:
            formatted_text = await try_format_with_openai(raw_text)
        except Exception as format_err:
            # –ï—Å–ª–∏ –æ–±–µ –º–æ–¥–µ–ª–∏ —É–ø–∞–ª–∏
            raise Exception(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏). "
                f"–î–µ—Ç–∞–ª–∏: {str(format_err)}"
            )

        # –®–∞–≥ 4: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await progress_message.edit_text(
            "‚ú® –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç—Ç–∞–ø... (4/4)\n"
            "‚îî –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
        )

        await send_long_text_as_messages(
            progress_message,
            formatted_text,
            initial_text="‚ú® –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"
        )

    except Exception as e:
        logging.error(f"Error processing audio: {str(e)}")
        await progress_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n‚îî {str(e)}"
        )


async def process_audio_message(message: types.Message, progress_message: types.Message):
    """–õ–æ–≥–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≤—ã–∑–æ–≤–∞ process_audio_file."""
    temp_file = None
    try:
        temp_file = tempfile.NamedTemporaryFile(delete=False)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π file –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
        if message.voice:
            tg_file = message.voice
        elif message.audio:
            tg_file = message.audio
        elif message.document:
            tg_file = message.document
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è.")

        # –ü–æ–ª—É—á–∞–µ–º file info
        file_info = await bot.get_file(tg_file.file_id)

        # –°–∫–∞—á–∏–≤–∞–µ–º
        await download_telegram_file(file_info, temp_file.name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (mp3, wav, ogg, m4a)
        extension = await get_file_extension(temp_file.name)
        if not extension or extension not in ['mp3', 'wav', 'ogg', 'm4a']:
            raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–º (mp3, wav, ogg, m4a).")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_audio_file(temp_file.name, progress_message)

    except Exception as e:
        logging.error(f"Error handling audio message: {str(e)}")
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞:\n‚îî {str(e)}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_file:
            try:
                os.unlink(temp_file.name)
            except:
                pass


# =======================================================================
# –•–ï–ù–î–õ–ï–†–´ /start /help
# =======================================================================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª, "
        "–∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(HELP_MESSAGE)


# =======================================================================
# –•–ï–ù–î–õ–ï–† –û–ë–†–ê–ë–û–¢–ö–ò –ê–£–î–ò–û (voice, audio, document)
# =======================================================================

@dp.message(F.voice | F.audio | F.document)
async def handle_audio(message: types.Message):
    user_id = message.from_user.id
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª-–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á (–Ω–µ –±–æ–ª–µ–µ 3)
    if len(user_tasks.get(user_id, set())) >= 3:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ-¬´reply¬ª –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ
    progress_message = await message.reply("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ...")

    # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(process_audio_message(message, progress_message))
    user_tasks[user_id].add(task)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º cleanup, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ user_tasks
    asyncio.create_task(cleanup_task(user_id, task))


# =======================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =======================================================================

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(dp.start_polling(bot, skip_updates=True))

if __name__ == "__main__":
    main()
